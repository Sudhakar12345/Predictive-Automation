library()
install.packages("xlsx")
library(xlsx)
install.packages("xgboost")
install.packages("neuralnet")
install.packages("nnet")
library(neuralnet)
?neuralnet
install.packages("caret")
install.packages(NeuralNetTools)
install.packages("NeuralNetTools")
install.packages("~/Downloads/NeuralNetTools_1.4.0.tar.gz", repos = NULL, type = "source")
a <- 5
b <- 10
a+b
install.packages("Rfacebook")
install.packages("installr")
install.packages("installr")
library(devtools)
library(rJava)
.jinit(classpath = "/home/vinayak/R/i686-pc-linux-gnu-library/3.3/rJava", parameters = getOption("java.parameters"),silent = FALSE, force.init = FALSE)
Sys.getenv("LD_LIBRARY_PATH")
library(coreNLP)
libLoc = "/home/vinayak/R Files"
initCoreNLP(libLoc, mem = "2g")
libLoc = "/home/vinayak/R Files/stanford-corenlp-full-2015-04-20"
initCoreNLP(libLoc, mem = "2g")
initCoreNLP()
sessionInfo()
.jinit()
.jcall("java/lang/System","S","getProperty","java.version")
.jcall("java/lang/System","S","getProperty","java.version")
library(coreNLP)
library(openNLP)
??openNLP
s <- paste(c("Pierre Vinken, 61 years old, will join the board as a ",
"nonexecutive director Nov. 29.\n",
"Mr. Vinken is chairman of Elsevier N.V., ",
"the Dutch publishing group."),
collapse = "")
s
s <- as.String(s)
library(plyr)
s <- as.String(s)
library(stringr)
s <- as.String(s)
library(tm)
s <- as.String(s)
s
sents = Maxent_POS_Tag_Annotator(s)
>Maxent_POS_Tag_Annotator()
?Maxent_POS_Tag_Annotator()
wor = Maxent_Word_Token_Annotator(s)
wor = Maxent_Word_Token_Annotator()
pos_ta = Maxent_POS_Tag_Annotator()
sen = Maxent_Sent_Token_Annotator()
a2 =  annotate(s,list(sen,wor))
a = annotate(s,pos_ta,a2)
a
train = read.csv("python files/train.csv")
View(train)
table(is.na(train))
library(caret)
library(e1071)
names(train)
train1 = train
names(train1)
View(train)
train1$word = "like"
View(train1)
train1 = train1[,-(18:19)]
names(train1)
train1 = train1[,-1]
model = naiveBayes(Targetword_like ~ . , data = train1)
test = train1[70:98,]
View(test)
train2 = train1[1:69,]
View(train2)
model = naiveBayes(Targetword_like ~ . , data = train2)
names(test)
test = test[,-4]
pred = predict(model, test)
pred = as.data.frame(pred)
View(pred)
View(train)
smp_size <- floor(0.75 * nrow(train1))
set.seed(123)
train_ind <- sample(seq_len(nrow(train1)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
View(test)
train <- train1[train_ind, ]
test <- train1[-train_ind, ]
View(train)
test1 = test
names(test1)
test1 = test1[,-4]
model = naiveBayes(Targetword_like ~ . , data = train)
pred = predict(model, test)
pred = as.data.frame(pred)
table(pred$pred,test$Targetword_like)
View(test)
table(train1$Like_pos)
View(train1)
train$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
train1$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
View(train1)
smp_size <- floor(0.75 * nrow(train1))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(train1)), size = smp_size)
train <- train1[train_ind, ]
test <- train1[-train_ind, ]
model = naiveBayes(Targetword_like ~ . , data = train)
View(test)
View(train)
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
names(train1)
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
names(train1)
View(train1)
train1$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
View(train1)
train1$Like_pos == 'VB'
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
names(train1)
train1$Like_pos == 'VB'
train1$Targetword_like
View(train1)
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
View(train1)
View(train1)
train1$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
View(train1)
train1$Targetword_like = ifelse(train1$Like_pos == 'positive',2,train1$Targetword_like)
View(train1)
train1$Targetword_like = ifelse(train1$Targetword_like == 'positive',2,train1$Targetword_like)
View(train1)
train1$Targetword_like = ifelse(train1$Targetword_like == 1,"Neutral","Positive")
View(train1)
View(train1)
train1 = train1[,-1]
smp_size <- floor(0.75 * nrow(train1))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(train1)), size = smp_size)
train <- train1[train_ind, ]
test <- train1[-train_ind, ]
model = naiveBayes(Targetword_like ~ . , data = train)
test1 = test
names(test1)
test1 = test1[,-4]
pred = predict(model, test)
pred = as.data.frame(pred)
table(pred$pred,test$Targetword_like)
pred = predict(model, test1)
pred = as.data.frame(pred)
table(pred$pred,test$Targetword_like)
library(caret)
library(e1071)
train1 = train
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
names(train1)
train1$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
train1$Targetword_like = ifelse(train1$Targetword_like == "positive",2,train1$Targetword_like)
train1$Targetword_like = ifelse(train1$Targetword_like == 1,"Neutral","Positive")
View(train1)
train1 = train1[,-1]
smp_size <- floor(0.75 * nrow(train1))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(train1)), size = smp_size)
train <- train1[train_ind, ]
test <- train1[-train_ind, ]
View(train)
View(test)
model = naiveBayes(Targetword_like ~ . , data = train)
test1 = test
names(test1)
test1 = test1[,-4]
pred = predict(model, test)
pred = as.data.frame(pred)
View(pred)
pred
pred = predict(model, test1)
pred
View(train)
train = read.csv("python files/train.csv")
table(is.na(train))
library(caret)
library(e1071)
train1 = train
names(train1)
train1$Targetword_like = ifelse(train1$Like_pos == 'VB',"positive",train1$Targetword_like)
train1$Targetword_like = ifelse(train1$Targetword_like == "positive",2,train1$Targetword_like)
train1$Targetword_like = ifelse(train1$Targetword_like == 1,"Neutral","Positive")
train1 = train1[,-1]
## 75% of the sample size
smp_size <- floor(0.75 * nrow(train1))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(train1)), size = smp_size)
train <- train1[train_ind, ]
test <- train1[-train_ind, ]
model.fit = naiveBayes(Targetword_like ~ . , data = train)
test1 = test
names(test1)
test1 = test1[,-4]
pred = predict(model, test1)
pred = predict(model.fit, test1)
pred = as.data.frame(pred)
test1 = as.data.frame(test1)
View(test1)
pred = predict(model.fit, test1)
pred = as.data.frame(pred)
train = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",nrows = 1000000,sep = ",")
train1 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 1000000,header = T,nrow = 1000000,sep = ",")
#test = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/test_ver2.csv",sep = ",")
## Changing colnames to new dataset by previous datset
col <- c( "fecha_dato","ncodpers","ind_empleado","pais_residencia","sexo",
"age", "fecha_alta", "ind_nuevo", "antiguedad","indrel",
"ult_fec_cli_1t", "indrel_1mes","tiprel_1mes"  ,"indresi","indext",
"conyuemp"             , "canal_entrada",         "indfall", "tipodom", "cod_prov",
"nomprov"          ,     "ind_actividad_cliente", "renta"  , "segmento","ind_ahor_fin_ult1",
"ind_aval_fin_ult1" ,"ind_cco_fin_ult1", "ind_cder_fin_ult1"  , "ind_cno_fin_ult1","ind_ctju_fin_ult1",
"ind_ctma_fin_ult1"  ,   "ind_ctop_fin_ult1",     "ind_ctpp_fin_ult1",     "ind_deco_fin_ult1",     "ind_deme_fin_ult1",
"ind_dela_fin_ult1"    , "ind_ecue_fin_ult1" ,    "ind_fond_fin_ult1"  ,   "ind_hip_fin_ult1",      "ind_plan_fin_ult1",
"ind_pres_fin_ult1"    , "ind_reca_fin_ult1"  ,   "ind_tjcr_fin_ult1"  ,   "ind_valo_fin_ult1"  ,   "ind_viv_fin_ult1",
"ind_nomina_ult1"  ,     "ind_nom_pens_ult1"   ,  "ind_recibo_ult1")
#cols <- c("premium","change","newprice")
colnames(train1) <- col
names(train1)
train2 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 2000000,header = T,nrow = 1000000,sep = ",")
train3 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 3000000,header = T,nrow = 1000000,sep = ",")
train4 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 4000000,header = T,nrow = 1000000,sep = ",")
train5 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 5000000,header = T,nrow = 1000000,sep = ",")
train6 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 6000000,header = T,nrow = 1000000,sep = ",")
train7 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 7000000,header = T,nrow = 1000000,sep = ",")
colnames(train2) <- col
colnames(train3) <- col
colnames(train4) <- col
colnames(train5) <- col
colnames(train6) <- col
table(train6$fecha_dato)
table(train5$fecha_dato)
train7 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 7000000,header = T,nrow = 1000000,sep = ",")
train8 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 8000000,header = T,nrow = 1000000,sep = ",")
train9 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 9000000,header = T,nrow = 1000000,sep = ",")
colnames(train7) <- col
View(train7)
col <- c( "fecha_dato","ncodpers","ind_empleado","pais_residencia","sexo",
"age", "fecha_alta", "ind_nuevo", "antiguedad","indrel",
"ult_fec_cli_1t", "indrel_1mes","tiprel_1mes"  ,"indresi","indext",
"conyuemp"             , "canal_entrada",         "indfall", "tipodom", "cod_prov",
"nomprov"          ,     "ind_actividad_cliente", "renta"  , "segmento","ind_ahor_fin_ult1",
"ind_aval_fin_ult1" ,"ind_cco_fin_ult1", "ind_cder_fin_ult1"  , "ind_cno_fin_ult1","ind_ctju_fin_ult1",
"ind_ctma_fin_ult1"  ,   "ind_ctop_fin_ult1",     "ind_ctpp_fin_ult1",     "ind_deco_fin_ult1",     "ind_deme_fin_ult1",
"ind_dela_fin_ult1"    , "ind_ecue_fin_ult1" ,    "ind_fond_fin_ult1"  ,   "ind_hip_fin_ult1",      "ind_plan_fin_ult1",
"ind_pres_fin_ult1"    , "ind_reca_fin_ult1"  ,   "ind_tjcr_fin_ult1"  ,   "ind_valo_fin_ult1"  ,   "ind_viv_fin_ult1",
"ind_nomina_ult1"  ,     "ind_nom_pens_ult1"   ,  "ind_recibo_ult1")
#cols <- c("premium","change","newprice")
colnames(train7) <- col
colnames(train8) <- col
colnames(train9) <- col
table(train9$fecha_dato)
train4 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 12000000,header = T,nrow = 1000000,sep = ",")
train5 = read.csv2("/home/vinayak/Downloads/sudhakar/kaggle/train_ver2.csv",skip = 13000000,header = T,nrow = 1000000,sep = ",")
col <- c( "fecha_dato","ncodpers","ind_empleado","pais_residencia","sexo",
"age", "fecha_alta", "ind_nuevo", "antiguedad","indrel",
"ult_fec_cli_1t", "indrel_1mes","tiprel_1mes"  ,"indresi","indext",
"conyuemp"             , "canal_entrada",         "indfall", "tipodom", "cod_prov",
"nomprov"          ,     "ind_actividad_cliente", "renta"  , "segmento","ind_ahor_fin_ult1",
"ind_aval_fin_ult1" ,"ind_cco_fin_ult1", "ind_cder_fin_ult1"  , "ind_cno_fin_ult1","ind_ctju_fin_ult1",
"ind_ctma_fin_ult1"  ,   "ind_ctop_fin_ult1",     "ind_ctpp_fin_ult1",     "ind_deco_fin_ult1",     "ind_deme_fin_ult1",
"ind_dela_fin_ult1"    , "ind_ecue_fin_ult1" ,    "ind_fond_fin_ult1"  ,   "ind_hip_fin_ult1",      "ind_plan_fin_ult1",
"ind_pres_fin_ult1"    , "ind_reca_fin_ult1"  ,   "ind_tjcr_fin_ult1"  ,   "ind_valo_fin_ult1"  ,   "ind_viv_fin_ult1",
"ind_nomina_ult1"  ,     "ind_nom_pens_ult1"   ,  "ind_recibo_ult1")
colnames(train4) <- col
colnames(train5) <- col
table(train4$fecha_dato)
table(train5$fecha_dato)
train = rbind(train4,train5)
getwd()
write.csv(train,"/home/vinayak/Downloads/sudhakar/kaggle/train.csv")
library(rhdf5)
h5ls("/home/vinayak/Desktop/train.h5")
mydata <- h5read("path/to/file.h5", "/train")
mydata <- h5read("path/to/file.h5", "/train/mydata")
mydata <- h5read("/home/vinayak/Desktop/train.h5", "/train/mydata")
mydata <- h5read("/home/vinayak/Desktop/train.h5", "/train")
str(mydata)
licence()
library(colourpicker)
if (interactive()) {
cols <- colourPicker(1)
}
### Building Automation Model
setwd("/home/vinayak/sudhakar/R/automation_model")
#setwd(dlgDir(default = getwd())$res)
######### packages are used #####################################
source("load_packages.R")
##################################################################
Home <- function()
{
z = menu(c("Load Dataset","View Dataset", "Rename or Remove Columns","Treating Missing Values",
"Treating Categorical Variables","Build Models",
"Plot the Data","Quit"),graphics = T, title="Select What do you want to do")
if(z == 1) {source("Load_dataset.R")}
#return(data)
#data1 = as.data.frame(return(data))}
else if(z == 2){source("View_Dataset.R")}
else if(z == 3){source("Modify_Columns.R")}
else if(z == 4){source("Treat_missing_data.R")}
else if(z == 5){source("Treat_categorical_data.R")}
else if(z == 6){source("Build_models.R")}
else if(z == 7){source("Plot.R")}
else if(z == 8){quit()}
else if(z != 1 || 2 || 3 || 4 || 5 || 6 || 7){ print("You Enter Wrong Option , You Redirect to Home Page",source("Home_Page.R"))}
return(data)
}
Home()
utils::View(train)
## View datasets interactively
library(googleVis)
loading = function(a){
utils::View(a)
}
library(tcltk)
de =  dlgList(c(ls()[sapply(mget(ls(), .GlobalEnv), is.data.frame)]), multiple = FALSE, title = "Select the Dataset To View")$res
#p = menu(c(ls()[sapply(mget(ls(), .GlobalEnv), is.data.frame)]), graphics = T,title = "Select Below One")
if(de == "data"){
data = loading(data)
#source("Home_Page.R")
}else if(de == "train"){
train = loading(train)
#source("Home_Page.R")
}else if(de == "test"){
test = loading(test)
#source("Home_Page.R")
}
source("Home_Page.R")
